 #include<iostream>
#include<vector>
 using namespace std;
 int n;
 const int MaxN=1e5;
 long long w[MaxN+1];//每个点的权重
 int ww[MaxN+1];//每个点作为根节点时的最大权和 
 long long ans=0;
 vector<int>g[MaxN+1];//邻接表
 //以root为根 算出最大权和 
 void dfs(int root,int fa){
     ww[root]=w[root];
     for(int i=0;i<g[root].size();i++){
         int son=g[root][i];//其中一个孩子
         if(son!=fa){
             dfs(son,root);
             if(ww[son]>0){
                 ww[root]+=ww[son];
             }
         } 
     }
     if(ww[root]>ans){
         ans=ww[root];
     }
 } 
 int main(){
     cin>>n;
     for(int i=1;i<=n;i++){
         cin>>w[i];
     }
     for(int j=0;j<n-1;j++){
         int u,v;
         cin>>u>>v;
         g[u].push_back(v);
         g[v].push_back(u);
     }
     dfs(1,0);
     cout<<ans;
     return 0;
 }
  #include<iostream>
#include<vector>
 using namespace std;
 int n;
 const int MaxN=1e5;
 long long w[MaxN+1];//每个点的权重
 int ww[MaxN+1];//每个点作为根节点时的最大权和 
 long long ans=0;
 vector<int>g[MaxN+1];//邻接表
 //以root为根 算出最大权和 
 void dfs(int root,int fa){
     ww[root]=w[root];
     for(int i=0;i<g[root].size();i++){
         int son=g[root][i];//其中一个孩子
         if(son!=fa){
             dfs(son,root);
             if(ww[son]>0){
                 ww[root]+=ww[son];
             }
         } 
     }
     if(ww[root]>ans){
         ans=ww[root];
     }
 } 
 int main(){
     cin>>n;
     for(int i=1;i<=n;i++){
         cin>>w[i];
     }
     for(int j=0;j<n-1;j++){
         int u,v;
         cin>>u>>v;
         g[u].push_back(v);
         g[v].push_back(u);
     }
     dfs(1,0);
     cout<<ans;
     return 0;
 }
 
