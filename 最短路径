#include<stdio.h>
#include<stdlib.h>
#define maxsize 1000  //表示两点间不可达，距离为无穷远
void dijkstra(int C[200][200],int v,int n);//求原点v到其余顶点的最短路径及其长度
int main()
{
 printf("                           ——Dijkstra算法——\n");
 int n,e,v_1,v_2,l;
 int v=1,i,j,C[200][200];
 scanf("%d %d",&n,&e);
 	for(i=0;i<n;i++)
	{ 
		for(j=0;j<n;j++)
		{
			C[i][j]=maxsize;
		}
	}
	for(i=0;i<e;i++)
	{
		//printf("请输入边（结点表示）以及权值：");
		scanf("%d %d %d",&v_1,&v_2,&l);
		C[v_1-1][v_2-1]=l;
		C[v_2-1][v_1-1]=l;
	}
 printf("【打印有向图的邻接矩阵】\n");
 for(i=0;i<n;i++)
 {
  for(j=0;j<n;j++)
  {
   printf("\t%d",C[i][j]);
  }
  printf("\n");
 }
 printf("【打印原点1到其他各点的最短路径及其长度】\n");
 dijkstra(C,v,n);
 system("pause");
 return 0;
}
void dijkstra(int C[200][200],int v,int n)//求原点v到其余顶点的最短路径及其长度
//C为有向网络的带权邻接矩阵
{
 int D[200];
 int P[200],S[200];
 int i,j,k,v1,pre;
 int min,max=maxsize,inf=1200;
 v1=v-1;
 for(i=0;i<n;i++)
 {
  D[i]=C[v1][i];   //置初始距离值
  if(D[i]!=max)
   P[i]=v;
  else
   P[i]=0;
 }
 for(i=0;i<n;i++)
  S[i]=0;      //红点集S开始为空
 S[v1]=1;D[v1]=0;    //开始点v送S
 for(i=0;i<n-1;i++)   //扩充红点集
 {
  min=inf;//令inf>max，保证距离值为max的蓝点能扩充到S中
  for(j=0;j<n;j++)//在当前蓝点中选距离值最小的点k+1
  {
   if((!S[j])&&(D[j]<min))
   {
    min=D[j];
    k=j;
   }
  }
  S[k]=1;    //将k+1加入红点集
  for(j=0;j<n;j++)
  {
   if((!S[j])&&(D[j]>D[k]+C[k][j]))//调整各蓝点的距离值
   {
    D[j]=D[k]+C[k][j];  //修改蓝点j+1的距离
    P[j]=k+1;     //k+1是j+1的前趋
   }
  }
 }  //所有顶点均已扩充到S中
 for(i=0;i<n;i++)
 {
  printf("%d到%d的最短距离为",v,i+1);
  printf("%d\n",D[i]);  //打印结果
  pre=P[i];
  printf("路径：%d",i+1);
  while(pre!=0)  //继续找前趋顶点
  {
   printf("<——%d",pre);
   pre=P[pre-1];
  }
  printf("\n");
 }
}  //dijkstra
