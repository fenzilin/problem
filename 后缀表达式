/*
1.不含负数
  单数减号【例如：- - - 1 1 1 1】 1-(1-1-1)=1-1+1+1相当于减掉一个最小的
  双数减号【例如：- - + 1 1 1 1】 1+1-(1-1)
  总结减号数>=1都可以转换成减去最小的数
2.含有负数(例如：- - + -1 -1 -1 1   --->   1-[-1+(-1)]-(-1)    )
  (假设:负数f个，加号p个，减号m个，数n个，n=m+p+1)  (f>0,m>=1,n-m>=1,f<=n)
  1个减号可以把p+1即n-m个负数转成正数(p是加号的个数，p=n-m-1)，剩余f-(n-m)个负数，此时减号还有m-1个(因为用了一个)，
  剩余的每个负数都由一个减号去转换。（先不考虑f-(n-m)大小,即先不考虑剩余负数的个数）

  a.当f-(n-m)<m-1时，即f<n-1, 也就是f-n<-1，要让这个不等式成立，必须讨论f-(n-m)的大小，
        如果f-(n-m)<0即f-n<-m,那么-m=-1，即m=1，此时上面的不等式才成立，
        反之f-(n-m)>0即f-n>-m,因为m>=1，所以此时f-(n-m)<m-1不成立。
        所以这种情况下，f-(n-m)<m-1说明不会剩余负数，m=1,即m-1=0说明减号也没了，
        那么此时没负数也没负号了，输出所有数的绝对值之和

  b.当f-(n-m)>m-1时，即f>n-1 也就是f>=n， *即f==n ，再由上述剩余f-(n-m)个负数得，f-(n-m)=n-(n-m)=m，此时减号还有m-1个，
        所以此时没有减号了，但还有1个负数   (绝对值总和减到取绝对值最小的那个负数的两倍)

  c.当f-(n-m)=m-1时，即f=n-1，此时没负数也没负号了，输出所有数的绝对值之和

  根据a,b,c得
    当f==n(所有数全是负数)时，绝对值总和减到取绝对值最小的那个负数的两倍(注意是两倍)
    当f!=n时，输出所有数的绝对值之和
*/

#include <iostream>
#include<algorithm>
using namespace std;
int p,m,n;
long long sum=0,rsum=0;//sum是绝对值和，rsum是真实值和
int fu=0,min;
long long num[200001],fnum[200001];
int main()
{
  cin>>p>>m;
  n=p+m+1;
  for(int i=0;i<n;i++){
    cin>>num[i];
    if(num[i]<0){
      fnum[fu]=num[i];
      fu++;//记录负数个数
      sum-=num[i];
    }
    else
      sum+=num[i];
    rsum+=num[i];
  }
  if(m==0){
    cout<<rsum;
  }
  else{
    sort(num,num+n);
    if(fu==0)
      cout<<sum-2*num[0];
    else{
      if(fu!=n)
        cout<<sum;
      else{
        sort(fnum,fnum+fu);
        cout<<sum-(-2*fnum[fu-1]);
      }
    }
  }
  return 0;
}
